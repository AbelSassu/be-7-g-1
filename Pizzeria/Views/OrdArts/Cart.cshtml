@model Pizzeria.Models.Ordini

<h2 class="text-center my-4">Carrello</h2>
@if (ViewBag.UserCart != null && ViewBag.UserCart.Count > 0)
{
    <div class="d-flex justify-content-evenly">
        <div>
            <table>
                <tr>
                    <th style="width:200px; height:50px">Nome</th>
                    <th style="width:100px">Prezzo</th>
                    <th style="width:100px">Quantità</th>
                    <th style="width:100px">Rimuovi</th>
                </tr>
                @foreach (var item in ViewBag.UserCart)
                {
                    <tr>
                        <td>@item.Articolo.Nome</td>
                        <td>@item.Articolo.Prezzo €</td>
                        <td>
                            @using (Html.BeginForm("AggiornaQuantita", "OrdArts", FormMethod.Post))
                            {
                                <input type="hidden" name="articoloId" value="@item.Articolo.Articolo_ID" />
                                <button type="submit" name="operazione" value="incrementa" class="btn btn-outline-primary">+</button>
                                <span>@item.Quantita</span>
                                <button type="submit" name="operazione" value="decrementa" class="btn btn-outline-primary">-</button>
                            }
                        </td>
                        <td>
                            @using (Html.BeginForm("RimuoviDallCarrello", "OrdArts", FormMethod.Post))
                            {
                                <input type="hidden" name="articoloId" value="@item.Articolo.Articolo_ID" />
                                <input type="submit" value="Elimina" class="btn btn-outline-danger" />
                            }
                        </td>
                    </tr>
                }
            </table>
            <div>
                @using (Html.BeginForm("SvuotaCarrello", "OrdArts", FormMethod.Post))
                {
                    <input type="submit" value="Svuota Carrello" class="btn btn-outline-danger mt-4" />
                }
            </div>
        </div>
        <div>
            @using (Html.BeginForm("CreateOrderFromCart", "OrdArts", FormMethod.Post))
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    <h3 class="mb-4">Ordina</h3>
                    @Html.HiddenFor(model => model.Ordine_ID)
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.Indirizzo, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Indirizzo, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Indirizzo, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group visually-hidden">
                        @Html.LabelFor(model => model.Stato, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Stato, new { htmlAttributes = new { @class = "form-control", @value = "Preparazione" } })
                            @Html.ValidationMessageFor(model => model.Stato, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group visually-hidden">
                        @Html.LabelFor(model => model.Data, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Data, new { htmlAttributes = new { @class = "form-control", @value = DateTime.Today } })
                            @Html.ValidationMessageFor(model => model.Data, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group visually-hidden">
                        @Html.LabelFor(model => model.Totale, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Totale, new { htmlAttributes = new { @class = "form-control", @value = 0 } })
                            @Html.ValidationMessageFor(model => model.Totale, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group mt-3">
                        @Html.LabelFor(model => model.Note, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Note, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group my-4">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Conferma Ordine" class="btn btn-outline-success" />
                        </div>
                    </div>
                </div>
            }

        </div>
    </div>
}
else
{
    <p>Il carrello è vuoto</p>
}